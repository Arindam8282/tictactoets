{"version":3,"file":"static/js/628.17d43c8e.chunk.js","mappings":"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","sources":["components/Game/GameTurn/GameTurn.tsx","components/Game/GameShapes/CircleShape.tsx","components/Game/GameShapes/CrossShape.tsx","components/Game/GameOverBorder/GameOverBorder.tsx","components/Game/Game.tsx","components/Game/GameOverScreen/GameOverScreen.tsx","components/AiPlayers/AiPlayers.tsx","components/Game/GameScreen/GameScreen.tsx","components/Buttons/MainMenuButton/MainMenuButton.tsx","contexts/GameContext.tsx","pages/PVAI/PVAI.tsx","utility/gameFunctions.ts"],"sourcesContent":["\n\ninterface PlayerColor{\n    [key:string]: string;\n}\nconst playerColor:PlayerColor = {\n    o:'blue',\n    x:'red',\n}\ninterface Props{\n    count: number;\n    playerName: string;\n    weapon: string;\n    currentPlayer: string;\n}\nconst GameTurn = ({count=0,playerName=\"Player\",weapon,currentPlayer}: Props) => {    \n    const bottomBorderCondition = {\n        'true':playerColor[weapon],\n        'false':'white'\n    }\n    return ( \n        <div className=\"flex flex-col items-center\">\n            <span>{count}</span>\n            <div className={`border-b-8 border-${bottomBorderCondition[`${currentPlayer===weapon}`]}-500`}>\n                <span className={`text-${playerColor[`${weapon}`]}-500 text-2xl`}>{weapon}</span>\n                <span>{playerName}</span>\n            </div>\n        </div>\n    );\n}\nexport default GameTurn;","interface Props{\n \n}\nconst CircleShape = ({}: Props) => {\n    return ( \n        <div className=\"w-16 h-16 border-8 border-blue-400 rounded-full\"></div>\n    );\n}\nexport default CircleShape;","import * as React from 'react';\ninterface Props{\n \n}\nconst CrossShape = ({}: Props) => {\n  return (\n    <React.Fragment>\n      <div className=\"absolute w-20 h-2 bg-red-600 rotate-45\"></div>\n      <div className=\"absolute w-20 h-2 bg-red-600 -rotate-45\"></div>\n    </React.Fragment>\n  );\n};\n\nexport default CrossShape;\n","import * as React from \"react\";\n\ninterface Border {\n  [key: string]: string;\n}\ninterface Props {\n  gameOverType: string;\n}\nconst GameOverBorder = ({ gameOverType }: Props) => {\n  const borders: Border = {\n    TG: \"\",\n    LD: \"absolute top-0 left-0 w-[130%] h-[6px] bg-yellow-500 rotate-45 origin-top-left animate-growLeftDiagonal\",\n    RD: \"absolute top-0 right-0 w-[141%] h-[6px] bg-yellow-500 -rotate-45 origin-right animate-growRightDiagnal\",\n    row1: \"absolute bg-yellow-500 animate-grow transform top-[15%] left-0 w-full h-2\",\n    row2: \"absolute bg-yellow-500 animate-grow transform top-[47.5%] left-0 w-full h-2\",\n    row3: \"absolute bg-yellow-500 animate-grow transform top-[80%] left-0 w-full h-2\",\n    col1: \"absolute top-0 left-[16.5%] w-2 h-full bg-yellow-500 animate-grow-vert\",\n    col2: \"absolute bg-yellow-500 animate-grow-vert transform left-[48.5%] top-0 h-full w-2\",\n    col3: \"absolute bg-yellow-500 animate-grow-vert transform left-[80%] top-0 h-full w-2\",\n  };\n  return (\n      <div className={borders[gameOverType]}></div>\n  );\n};\nexport default GameOverBorder;\n","import React, { useState } from \"react\";\nimport CircleShape from \"./GameShapes/CircleShape\";\nimport CrossShape from \"./GameShapes/CrossShape\";\nimport { useGame } from \"contexts/GameContext\";\nimport { CellValue, to2DArray } from \"utility/gameFunctions\";\nimport GameOverBorder from \"./GameOverBorder/GameOverBorder\";\n\nconst boxes: string[] = [\n  \" border-r-8 border-b-8 border-gray-400 \",\n  \" border-r-8 border-b-8  border-gray-400 \",\n  \" border-b-8 border-gray-400 \",\n  \" border-r-8 border-b-8 \",\n  \" border-r-8 border-b-8 \",\n  \" border-b-8 \",\n  \" border-r-8 \",\n  \" border-r-8 \",\n  \" flex \",\n];\ninterface ElementMap {\n  [key: string]: React.ReactElement;\n}\ninterface GameProps {\n}\nconst Game = ({}: GameProps) => {\n  const { gameType,board, setBoard, currentPlayer, setCurrentPlayer, gameWinner,gameInfo, handleGameOver } = useGame();\n\n  const getShape: ElementMap = {\n    o: <CircleShape />,\n    x: <CrossShape />,\n  };\n  \n\n  const fillCell = (index: number, shape: CellValue) => {\n    if(currentPlayer!==gameInfo.me.weapon && gameType===\"pvai\") return;\n    let gameArray: CellValue[] = board.flat();\n    if (!gameArray[index]) {\n      gameArray[index] = shape;\n      let newBoard:CellValue[][] = to2DArray(gameArray, 3)\n      handleGameOver(newBoard);\n      setCurrentPlayer(currentPlayer === \"o\" ? \"x\" : \"o\");\n      setBoard([...newBoard]);\n    }\n  };\n\n\n  return (\n    <React.Fragment>\n      <div className=\"grid grid-cols-3 grid-rows-3 w-72 h-72  relative\">\n        {boxes.map((box, index) => (\n          <div\n            key={index}\n            className={`${box} border-gray-400 flex items-center justify-center cursor-pointer`}\n            onClick={fillCell.bind(this, index, currentPlayer)}\n          >\n            {getShape[board.flat()[index]]}\n          </div>\n        ))}\n        {(gameWinner && gameWinner.type!=='TG') && <GameOverBorder gameOverType={gameWinner.type} />}\n      </div>\n    </React.Fragment>\n  );\n};\nexport default Game;\n","import { useEffect, useState } from \"react\";\n\ninterface GameOverScreenProps{\n    message:string;\n}\nconst GameOverScreen = ({message}:GameOverScreenProps) => {\n    const [timer,setTimer] = useState(5);\n\n    useEffect(()=>{\n        if(timer>0) {\n            let timeinterval = setInterval(()=>{\n                setTimer(timer-1);\n                clearInterval(timeinterval);\n            },1000)\n        }\n    },[timer])\n    \n    return ( \n        <div className=\"flex justify-center flex-col items-center absolute w-[40.2%] h-[69.3%] bg-gray-500/50 text-white text-2xl square\">\n            <p>{message}</p>\n            <p> replaying game in {timer}</p>\n        </div>\n     );\n}\n \nexport default GameOverScreen;","import { AiPlayerValue } from \"contexts/GameContext\";\n\ntype Props = {\n  players: AiPlayerValue[];\n  setAiPlayer: (value:string) => void;\n  aiPlayer: string;\n};\nexport const AiPlayers = ({ players,aiPlayer,setAiPlayer }: Props) => {\n  return (\n    <select value={aiPlayer} onChange={(e)=>setAiPlayer(e.target.value)}>\n      {players.map((player: AiPlayerValue, index: number) => (\n        <option key={index} value={player.value}>\n          {player.name}\n        </option>\n      ))}\n    </select>\n  );\n};\nexport default AiPlayers;","import GameTurn from \"components/Game/GameTurn/GameTurn\";\nimport MainMenuButton from \"components/Buttons/MainMenuButton/MainMenuButton\";\nimport * as React from \"react\";\nimport Game from \"../Game\";\nimport { aiPlayers, useGame } from \"contexts/GameContext\";\nimport GameOverScreen from \"../GameOverScreen/GameOverScreen\";\nimport AiPlayers from \"components/AiPlayers/AiPlayers\";\n\ntype GameType =  \"pvp\"|\"pvai\"|\"multiplayer\";\ninterface AiModeSelection{\n  [key:string]: React.ReactElement;\n}\ninterface GameScreenProps {\n}\nconst GameScreen = ({}: GameScreenProps) => {\n  const {gameWinner,gameInfo,currentPlayer,gameType,setAiPlayer,aiPlayer} = useGame();\n  const aiSelection: AiModeSelection = {\n    \"pvai\": <AiPlayers players={Object.values(aiPlayers)} aiPlayer={aiPlayer} setAiPlayer={setAiPlayer} />,\n  } \n  return (\n    <React.Fragment>\n      <div className=\"flex flex-col h-full justify-between\">\n        <div className=\"flex w-full justify-between\">\n          <MainMenuButton title=\"Main Menu\" link=\"/\" />\n          {aiSelection[gameType]}\n          <MainMenuButton title=\"Reset Score\" color=\"red\" link=\"/\" />\n        </div>\n        <div className=\"flex w-full justify-center\">\n          <Game />\n        </div>\n        <div className=\"flex w-full justify-around\">\n          <GameTurn currentPlayer={currentPlayer} playerName={gameInfo['o'].name} count={gameInfo['o'].score} weapon='o' />\n          <GameTurn currentPlayer={currentPlayer} playerName={gameInfo['t'].name} count={gameInfo['t'].score} weapon='t' />\n          <GameTurn currentPlayer={currentPlayer} playerName={gameInfo['x'].name} count={gameInfo['x'].score} weapon='x' />\n        </div>\n        {(gameWinner) && <GameOverScreen message={`${gameWinner.value} has won the match`} />}\n      </div>\n    </React.Fragment>\n  );\n};\nexport default GameScreen;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  title?: string;\n  link?: string;\n  color?: string;\n}\nconst MainMenuButton = ({ title = \"Click Me\", link = \"/\",color = 'green' }: Props) => {\n  let colorMap = new Map<string,string>();\n  colorMap.set('green','from-green-400 via-green-500 to-green-600 hover:from-green-500 hover:to-green-700');\n  colorMap.set('red','from-red-400 via-red-500 to-red-600 hover:from-red-500 hover:to-red-700');\n  \n  return (\n    <React.Fragment>\n      <Link\n        to={link}\n        className={`text-center inline-block bg-gradient-to-r ${colorMap.get(color)} text-white font-semibold py-2 px-6 rounded-lg shadow-md  transition-all duration-300`}\n      >\n        {title}\n      </Link>\n    </React.Fragment>\n  );\n}\nexport default MainMenuButton;\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport {\n  bestPlayerVsComputer,\n  CellValue,\n  easyPlayerVsComputer,\n  hardPlayerVsComputer,\n  isBoardEmpty,\n  isGameOver,\n  UniformResult,\n} from \"utility/gameFunctions\";\n\ninterface GameContextType {\n  gameType: string;\n  board: CellValue[][];\n  setBoard: (board: CellValue[][]) => void;\n  currentPlayer: CellValue;\n  setCurrentPlayer: (player: CellValue) => void;\n  gameWinner: UniformResult<CellValue> | false;\n  setGameWinner: (winner: UniformResult<CellValue> | false) => void;\n  gameInfo: GameInfo;\n  setGameInfo: (info: GameInfo) => void;\n  resetGame: () => void;\n  resetScore: () => void;\n  handleGameOver: (newBoard: CellValue[][])=> void;\n  setAiPlayer:(player:string)=>void;\n  aiPlayer: string;\n}\ninterface Player {\n  name: string;\n  weapon: string;\n  score: number;\n}\ninterface GameInfo {\n  [key: string]: Player;\n}\nconst defaultBoard: CellValue[][] = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\nconst defaultGameInfo: GameInfo = {\n  me: {\n    name: \"Player1\",\n    weapon: \"o\",\n    score: 0,\n  },\n  o: {\n    name: \"Player1\",\n    weapon: \"o\",\n    score: 0,\n  },\n  x: {\n    name: \"Player2\",\n    weapon: \"x\",\n    score: 0,\n  },\n  t: {\n    name: \"TIE\",\n    weapon: \"t\",\n    score: 0,\n  },\n};\nexport interface AiPlayerValue{\n  value: string,\n  name: string,\n  method: Function\n}\nexport interface AiPlayer{\n  [key:string]: AiPlayerValue;\n}\nexport const aiPlayers:AiPlayer={\n  e:{\n    value:'e',\n    name:\"Easy\",\n    method: easyPlayerVsComputer\n  },\n  m:{\n    value:'m',\n    name:\"Medium\",\n    method: hardPlayerVsComputer\n  },\n  h:{\n    value:'h',\n    name:\"Hard\",\n    method: bestPlayerVsComputer\n  }\n}\nconst GameContext = createContext<GameContextType | undefined>(undefined);\ninterface GameProviderProps {\n  children: ReactNode;\n  gameType: string;\n}\nexport const GameProvider = ({ children, gameType }: GameProviderProps) => {\n  const [board, setBoard] = useState<CellValue[][]>(defaultBoard);\n  const [currentPlayer, setCurrentPlayer] = useState<CellValue>('o');\n  const [gameInfo, setGameInfo] = useState<GameInfo>(defaultGameInfo);\n  const [gameWinner, setGameWinner] = useState<\n    UniformResult<CellValue> | false\n  >(false);\n  const [aiPlayer,setAiPlayer] = useState<string>('e');\n\n  useEffect(() => {\n    handleGameOperations();\n  }, [board]);\n\n  const handleGameOperations = async () => {\n    if (gameType === \"pvai\") {\n      if(gameInfo[\"me\"].weapon !== currentPlayer && !gameWinner){\n        let newBoard = await aiPlayers[aiPlayer].method(board, currentPlayer);   \n        handleGameOver(newBoard);\n        setBoard([...newBoard]);\n        setCurrentPlayer(currentPlayer === \"o\" ? \"x\" : \"o\");\n      } \n    }\n  };\n\n  const handleGameOver = (newBoard: CellValue[][]) => {\n    const gameOverValue = isGameOver(newBoard);\n    setGameWinner(gameOverValue);\n    if (gameOverValue) {\n      gameInfo[gameOverValue.value].score += 1;\n      setGameInfo({ ...gameInfo });\n      let gameTimeout = setTimeout(() => {\n        resetGame();\n        clearTimeout(gameTimeout);\n      }, 5000);\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(defaultBoard);\n    setCurrentPlayer(\"o\");\n    setGameWinner(false);\n  };\n  const resetScore = () => {\n    setGameInfo(defaultGameInfo);\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        gameType,\n        board,\n        setBoard,\n        currentPlayer,\n        setCurrentPlayer,\n        aiPlayer,\n        setAiPlayer,\n        gameWinner,\n        setGameWinner,\n        resetGame,\n        resetScore,\n        gameInfo,\n        setGameInfo,\n        handleGameOver\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = (): GameContextType => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error(\"useGame must be used within a GameProvider\");\n  }\n  return context;\n};\n","import GameScreen from \"components/Game/GameScreen/GameScreen\";\nimport { GameProvider } from \"contexts/GameContext\";\nimport * as React from \"react\";\n\ninterface Props {}\nconst PVAI = ({}: Props) => {\n  return (\n    <React.Fragment>\n      <GameProvider gameType=\"pvai\">\n        <GameScreen />\n      </GameProvider>\n    </React.Fragment>\n  );\n};\nexport default PVAI;\n","export const to2DArray = (arr: CellValue[], chunkSize: number): CellValue[][] =>\n  Array.from({ length: Math.ceil(arr.length / chunkSize) }, (_, i) =>\n    arr.slice(i * chunkSize, i * chunkSize + chunkSize)\n  );\nexport const isBoardEmpty = (\n  arr: (CellValue | string | null | undefined)[][]\n): boolean => {\n  return arr.every((row) =>\n    row.every((cell) => cell === \"\" || cell === null || cell === undefined)\n  );\n};\nexport const isGameOverCheck = (\n  gameArray: CellValue[]\n): UniformResult<CellValue> | false => {\n  const game2DArray: CellValue[][] = to2DArray(gameArray, 3);\n  return isGameOver(game2DArray);\n};\nexport const isGameOver = (\n  gameArray: CellValue[][]\n): UniformResult<CellValue> | false => {\n  let resultGameOver: UniformResult<CellValue>[] =\n    getUniformsWithValues(gameArray);\n  if (resultGameOver.length > 0) {\n    return resultGameOver[0];\n  }\n  return false;\n};\nexport type LineType =\n  | \"TG\"\n  | \"row1\"\n  | \"row2\"\n  | \"row3\"\n  | \"col1\"\n  | \"col2\"\n  | \"col3\"\n  | \"LD\"\n  | \"RD\";\nexport type CellValue = \"o\" | \"x\" | \"t\" | \"\";\nexport interface UniformResult<T> {\n  type: LineType; // \"row1\", \"col2\", \"LD\", \"RD\", etc.\n  value: T;\n}\nconst getUniformsWithValues = (\n  matrix: CellValue[][]\n): UniformResult<CellValue>[] => {\n  const result: UniformResult<CellValue>[] = [];\n\n  const size = matrix.length;\n\n  //  Check rows\n  matrix.forEach((row, i) => {\n    if (row.every((cell) => cell === row[0]) && row[0] !== \"\") {\n      result.push({\n        type: `row${i + 1}` as LineType,\n        value: row[0] as CellValue,\n      });\n    }\n  });\n\n  //  Check columns\n  for (let col = 0; col < size; col++) {\n    const first = matrix[0][col];\n    let isUniform = true;\n    for (let row = 1; row < size; row++) {\n      if (matrix[row][col] !== first) {\n        isUniform = false;\n        break;\n      }\n    }\n    if (isUniform && first !== \"\") {\n      result.push({\n        type: `col${col + 1}` as LineType,\n        value: first as CellValue,\n      });\n    }\n  }\n\n  //  Left Diagonal\n  const leftDiagonalValue = matrix[0][0];\n  if (\n    matrix.every((row, i) => row[i] === leftDiagonalValue) &&\n    leftDiagonalValue !== \"\"\n  ) {\n    result.push({\n      type: \"LD\",\n      value: leftDiagonalValue as CellValue,\n    });\n  }\n\n  //  Right Diagonal\n  const rightDiagonalValue = matrix[0][size - 1];\n  if (\n    matrix.every((row, i) => row[size - 1 - i] === rightDiagonalValue) &&\n    rightDiagonalValue !== \"\"\n  ) {\n    result.push({\n      type: \"RD\",\n      value: rightDiagonalValue as CellValue,\n    });\n  }\n\n  // tied\n  if (result.length < 1) {\n    const allNotEmpty = (array: CellValue[][]): boolean => {\n      return array.every((row) => row.every((cell) => cell.trim() !== \"\"));\n    };\n    if (allNotEmpty(matrix)) {\n      result.push({\n        type: \"TG\",\n        value: \"t\",\n      });\n    }\n  }\n\n  return result;\n};\n\nexport const easyPlayerVsComputer = async (\n  cellValues: CellValue[][],\n  valueToInsert: CellValue\n): Promise<CellValue[][]> => {\n  let emptyIndexes: number[] = [];\n  let flatCellValues = cellValues.flat();\n  flatCellValues.forEach((cell: CellValue, index: number) => {\n    if (cell === \"\") emptyIndexes.push(index);\n  });\n  const max = Math.max(...emptyIndexes);\n  const min = Math.min(...emptyIndexes);\n  let randomIndex = getRandomInRange(min, max);\n  while (!emptyIndexes.includes(randomIndex))\n    randomIndex = getRandomInRange(min, max);\n  flatCellValues[randomIndex] = valueToInsert;\n  await delay(1000);\n  return to2DArray(flatCellValues, 3);\n};\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nconst getRandomInRange = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\ntype Player = \"X\" | \"O\" | \"\";\ntype Board = CellValue[][];\n\nfunction cloneBoard(board: Board): Board {\n  return board.map((row) => [...row]);\n}\n\nfunction getOpponent(player: CellValue): CellValue {\n  return player === \"x\" ? \"o\" : \"x\";\n}\n\nfunction evaluate(board: Board, aiPlayer: CellValue): number {\n  const opponent = getOpponent(aiPlayer);\n\n  const lines: any[] = [\n    // Rows\n    ...board,\n    // Columns\n    [0, 1, 2].map((i) => [board[0][i], board[1][i], board[2][i]]),\n    // Diagonals\n    [board[0][0], board[1][1], board[2][2]],\n    [board[0][2], board[1][1], board[2][0]],\n  ];\n\n  for (const line of lines) {\n    if (line.every((cell: CellValue) => cell === aiPlayer)) return 10;\n    if (line.every((cell: CellValue) => cell === opponent)) return -10;\n  }\n\n  return 0; // No winner yet\n}\n\nfunction isMovesLeft(board: Board): boolean {\n  return board.some((row) => row.includes(\"\"));\n}\n\nfunction minimax(\n  board: Board,\n  depth: number,\n  isMax: boolean,\n  aiPlayer: CellValue\n): number {\n  const score = evaluate(board, aiPlayer);\n  if (score === 10 || score === -10) return score - depth;\n  if (!isMovesLeft(board)) return 0;\n\n  const opponent = getOpponent(aiPlayer);\n  let best = isMax ? -Infinity : Infinity;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === \"\") {\n        board[i][j] = isMax ? aiPlayer : opponent;\n        const value = minimax(board, depth + 1, !isMax, aiPlayer);\n        board[i][j] = \"\";\n        best = isMax ? Math.max(best, value) : Math.min(best, value);\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const hardPlayerVsComputer = async (\n  board: Board,\n  aiPlayer: CellValue\n): Promise<Board> => {\n  let bestVal = -Infinity;\n  let bestMove: [number, number] = [-1, -1];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === \"\") {\n        board[i][j] = aiPlayer;\n        const moveVal = minimax(board, 0, false, aiPlayer);\n        board[i][j] = \"\";\n\n        if (moveVal > bestVal) {\n          bestVal = moveVal;\n          bestMove = [i, j];\n        }\n      }\n    }\n  }\n\n  const newBoard = cloneBoard(board);\n  const [x, y] = bestMove;\n  if (x !== -1 && y !== -1) {\n    newBoard[x][y] = aiPlayer;\n  }\n  await delay(1000);\n  return newBoard;\n};\n\ninterface Move {\n  row: number;\n  col: number;\n}\n\nconst _minimax = () => {\n  let player: CellValue = \"x\";\n  let opponent: CellValue = \"o\";\n\n  const isMovesLeft = (board: Board): boolean => {\n    for (let i = 0; i < 3; i++)\n      for (let j = 0; j < 3; j++) if (board[i][j] === \"\") return true;\n    return false;\n  };\n\n  const evaluate = (b: Board): number => {\n    // Check rows\n    for (let row = 0; row < 3; row++) {\n      if (b[row][0] === b[row][1] && b[row][1] === b[row][2]) {\n        if (b[row][0] === player) return +10;\n        else if (b[row][0] === opponent) return -10;\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < 3; col++) {\n      if (b[0][col] === b[1][col] && b[1][col] === b[2][col]) {\n        if (b[0][col] === player) return +10;\n        else if (b[0][col] === opponent) return -10;\n      }\n    }\n\n    // Check diagonals\n    if (b[0][0] === b[1][1] && b[1][1] === b[2][2]) {\n      if (b[0][0] === player) return +10;\n      else if (b[0][0] === opponent) return -10;\n    }\n\n    if (b[0][2] === b[1][1] && b[1][1] === b[2][0]) {\n      if (b[0][2] === player) return +10;\n      else if (b[0][2] === opponent) return -10;\n    }\n\n    return 0;\n  };\n\n  const minimax = (board: Board, depth: number, isMax: boolean): number => {\n    const score = evaluate(board);\n\n    if (score === 10 || score === -10) return score;\n\n    if (!isMovesLeft(board)) return 0;\n\n    if (isMax) {\n      let best = -Infinity;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = player;\n            best = Math.max(best, minimax(board, depth + 1, false));\n            board[i][j] = \"\";\n          }\n        }\n      }\n\n      return best;\n    } else {\n      let best = Infinity;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = opponent;\n            best = Math.min(best, minimax(board, depth + 1, true));\n            board[i][j] = \"\";\n          }\n        }\n      }\n\n      return best;\n    }\n  };\n\n  const findBestMove = (board: Board): Move => {\n    let bestVal = -Infinity;\n    let bestMove: Move = { row: -1, col: -1 };\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === \"\") {\n          board[i][j] = player;\n          const moveVal = minimax(board, 0, false);\n          board[i][j] = \"\";\n\n          if (moveVal > bestVal) {\n            bestVal = moveVal;\n            bestMove = { row: i, col: j };\n          }\n        }\n      }\n    }\n\n    return bestMove;\n  };\n\n  return {\n    findBestMove,\n    setPlayer(p: CellValue) {\n      player = p;\n      opponent = p === \"x\" ? \"o\" : \"x\";\n    },\n  };\n};\n\nexport const bestPlayerVsComputer = async (\n  board: Board,\n  player: CellValue\n): Promise<Board> => {\n  const minimaxAI = _minimax();\n  minimaxAI.setPlayer(player); // Let AI play as \"o\"\n  const bestMove = minimaxAI.findBestMove(board);\n\n  console.log(\"Best move for AI:\", bestMove);\n  board[bestMove.row][bestMove.col] = player;\n  await delay(1000);\n  return board;\n};\n"],"names":["playerColor","o","x","_ref","count","playerName","weapon","currentPlayer","bottomBorderCondition","_jsxs","className","children","_jsx","React","gameOverType","TG","LD","RD","row1","row2","row3","col1","col2","col3","boxes","gameType","board","setBoard","setCurrentPlayer","gameWinner","gameInfo","handleGameOver","useGame","getShape","CircleShape","CrossShape","fillCell","index","shape","me","gameArray","flat","newBoard","to2DArray","map","box","onClick","bind","type","GameOverBorder","message","timer","setTimer","useState","useEffect","timeinterval","setInterval","clearInterval","players","aiPlayer","setAiPlayer","value","onChange","e","target","player","name","aiSelection","AiPlayers","Object","values","aiPlayers","MainMenuButton","title","link","color","Game","GameTurn","score","GameOverScreen","colorMap","Map","set","Link","to","get","defaultBoard","defaultGameInfo","t","method","easyPlayerVsComputer","m","hardPlayerVsComputer","h","bestPlayerVsComputer","GameContext","createContext","undefined","GameProvider","setGameInfo","setGameWinner","handleGameOperations","async","gameOverValue","isGameOver","gameTimeout","setTimeout","resetGame","clearTimeout","Provider","resetScore","context","useContext","Error","GameScreen","arr","chunkSize","Array","from","length","Math","ceil","_","i","slice","resultGameOver","getUniformsWithValues","matrix","result","size","forEach","row","every","cell","push","col","first","isUniform","leftDiagonalValue","rightDiagonalValue","array","trim","allNotEmpty","cellValues","valueToInsert","emptyIndexes","flatCellValues","max","min","randomIndex","getRandomInRange","includes","delay","ms","Promise","resolve","floor","random","getOpponent","minimax","depth","isMax","opponent","lines","line","evaluate","some","isMovesLeft","best","Infinity","j","bestVal","bestMove","moveVal","cloneBoard","y","_minimax","b","findBestMove","setPlayer","p","minimaxAI","console","log"],"sourceRoot":""}