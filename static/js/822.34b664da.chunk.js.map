{"version":3,"file":"static/js/822.34b664da.chunk.js","mappings":"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","sources":["components/Game/GameTurn/GameTurn.tsx","components/Game/GameShapes/CircleShape.tsx","components/Game/GameShapes/CrossShape.tsx","components/Game/GameOverBorder/GameOverBorder.tsx","components/Game/GameTurn/Turn.tsx","components/Game/FindingMatch/FindingMatch.tsx","components/Game/Game.tsx","components/Game/GameOverScreen/GameOverScreen.tsx","components/AiPlayers/AiPlayers.tsx","components/Game/GameScreen/GameScreen.tsx","components/Buttons/MainMenuButton/MainMenuButton.tsx","contexts/GameContext.tsx","utility/gameFunctions.ts","pages/Multiplayer/Multiplayer.tsx","utility/socket.ts"],"sourcesContent":["import { useGame } from \"contexts/GameContext\";\n\n\nexport interface PlayerColor{\n    [key:string]: string;\n}\nexport const playerColor:PlayerColor = {\n    o:'blue',\n    x:'red',\n}\ninterface Props{\n    count: number;\n    playerName: string;\n    weapon: string;\n    currentPlayer: string;\n}\nconst GameTurn = ({count=0,playerName=\"Player\",weapon,currentPlayer}: Props) => {   \n    const {gameInfo,gameType} = useGame() \n    const bottomBorderCondition = {\n        true:playerColor[weapon],\n        false:'white'\n    }\n    const currentPlayerName = {\n        true: <span>{gameInfo[\"me\"].weapon===weapon?\"You\":playerName}</span>,\n        false: <span>{playerName}</span>\n    }\n    const weaponLogic: any = {\n        'true': weapon\n    } \n    return ( \n        <div className=\"flex flex-col items-center\">\n            <span>{count}</span>\n            <div className={`border-b-8 border-${bottomBorderCondition[`${currentPlayer===weapon}`]}-500`}>\n                <span className={`text-${playerColor[`${weapon}`]}-500 text-2xl`}>{weaponLogic[`${weapon!=='t'}`]}</span>\n                {currentPlayerName[`${gameType!==\"pvp\"}`]}\n            </div>\n        </div>\n    );\n}\nexport default GameTurn;","interface Props{\n \n}\nconst CircleShape = ({}: Props) => {\n    return ( \n        <div className=\"w-16 h-16 border-8 border-blue-400 rounded-full\"></div>\n    );\n}\nexport default CircleShape;","import * as React from 'react';\ninterface Props{\n \n}\nconst CrossShape = ({}: Props) => {\n  return (\n    <React.Fragment>\n      <div className=\"absolute w-20 h-2 bg-red-600 rotate-45\"></div>\n      <div className=\"absolute w-20 h-2 bg-red-600 -rotate-45\"></div>\n    </React.Fragment>\n  );\n};\n\nexport default CrossShape;\n","import * as React from \"react\";\n\ninterface Border {\n  [key: string]: string;\n}\ninterface Props {\n  gameOverType: string;\n}\nconst GameOverBorder = ({ gameOverType }: Props) => {\n  const borders: Border = {\n    TG: \"\",\n    LD: \"absolute top-0 left-0 w-[130%] h-[6px] bg-yellow-500 rotate-45 origin-top-left animate-growLeftDiagonal\",\n    RD: \"absolute top-0 right-0 w-[141%] h-[6px] bg-yellow-500 -rotate-45 origin-right animate-growRightDiagnal\",\n    row1: \"absolute bg-yellow-500 animate-grow transform top-[15%] left-0 w-full h-2\",\n    row2: \"absolute bg-yellow-500 animate-grow transform top-[47.5%] left-0 w-full h-2\",\n    row3: \"absolute bg-yellow-500 animate-grow transform top-[80%] left-0 w-full h-2\",\n    col1: \"absolute top-0 left-[16.5%] w-2 h-full bg-yellow-500 animate-grow-vert\",\n    col2: \"absolute bg-yellow-500 animate-grow-vert transform left-[48.5%] top-0 h-full w-2\",\n    col3: \"absolute bg-yellow-500 animate-grow-vert transform left-[80%] top-0 h-full w-2\",\n  };\n  return (\n      <div className={borders[gameOverType]}></div>\n  );\n};\nexport default GameOverBorder;\n","import { CellValue } from \"utility/gameFunctions\";\nimport { playerColor } from \"./GameTurn\";\nimport { GameInfo } from \"contexts/GameContext\";\n\ninterface Props {\n    player: CellValue;\n    gameInfo: GameInfo;\n};\nconst Turn = ({player,gameInfo}: Props) => {\n    const turnLogic = {\n        true: \"Your Turn\",\n        false: \"Opponent's Turn\"\n    }\n  return (\n      <div className={`text-${playerColor[player]}-500 text-2xl font-bold`}>\n        {turnLogic[`${gameInfo.me.weapon===player}`]}\n      </div>\n  );\n};\nexport default Turn;\n","import MainMenuButton from \"components/Buttons/MainMenuButton/MainMenuButton\";\n\ninterface Props {\n}\nexport const FindingMatch = ({}: Props) => {\n  const copyUrlToClipboard = async () => {\n    let player = window.location.href[window.location.href.length-1];\n    let url = `${window.location.href.substring(0,window.location.href.length-1)}${player==='x'?'o':'x'}`;\n    try {\n      await navigator.clipboard.writeText(url);\n      console.log(\"URL copied!\",url);\n    } catch (err) {\n      console.error(\"Copy failed:\", err);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center\">\n      <span className=\"flex justify-center text-2xl font-bold w-[500px]\"></span>\n      <MainMenuButton title=\"Copy Url\" color=\"blue\" onClick={copyUrlToClipboard} />\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport CircleShape from \"./GameShapes/CircleShape\";\nimport CrossShape from \"./GameShapes/CrossShape\";\nimport { useGame } from \"contexts/GameContext\";\nimport { CellValue, to2DArray } from \"utility/gameFunctions\";\nimport GameOverBorder from \"./GameOverBorder/GameOverBorder\";\nimport { socket } from \"utility/socket\";\nimport Turn from \"./GameTurn/Turn\";\nimport { FindingMatch } from \"./FindingMatch/FindingMatch\";\n\nconst boxes: string[] = [\n  \" border-r-8 border-b-8 border-gray-400 \",\n  \" border-r-8 border-b-8  border-gray-400 \",\n  \" border-b-8 border-gray-400 \",\n  \" border-r-8 border-b-8 \",\n  \" border-r-8 border-b-8 \",\n  \" border-b-8 \",\n  \" border-r-8 \",\n  \" border-r-8 \",\n  \" flex \",\n];\ninterface ElementMap {\n  [key: string]: React.ReactElement;\n}\ninterface RoomInfo {\n  totalPlayersCount: number;\n  numberOfClients: number;\n}\nconst defaultRoom: RoomInfo = {\n  totalPlayersCount: 0,\n  numberOfClients: 2,\n};\ninterface GameProps {}\nconst Game = ({}: GameProps) => {\n  const {\n    gameType,\n    gameId,\n    board,\n    setBoard,\n    currentPlayer,\n    setCurrentPlayer,\n    gameWinner,\n    gameInfo,\n    handleGameOver,\n    resetGame,\n    resetScore\n  } = useGame();\n  const [roomInfo, setRoomInfo] = useState<RoomInfo>(defaultRoom);\n  const getShape: ElementMap = {\n    o: <CircleShape />,\n    x: <CrossShape />,\n  };\n\n  const makeMove = (newBoard: CellValue[][]) => {\n    socket.emit(\"makeMove\", {\n      gameId: gameId,\n      newBoard,\n      player: currentPlayer,\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"new game begin\");\n    \n    resetScore();\n    resetGame();\n    if (gameType === \"online\") {\n      socket.on(\"moveMade\", ({ newBoard, player }) => {\n        handleGameOver(newBoard);\n        setBoard([...newBoard]);\n        setCurrentPlayer(player === \"o\" ? \"x\" : \"o\");\n      });\n\n      socket.on(\n        \"playerJoined\",\n        ({ player, numberOfClients, totalPlayersCount }) => {\n          console.log(`${player} joined`, numberOfClients, totalPlayersCount);\n          setRoomInfo({ numberOfClients, totalPlayersCount });\n        }\n      );\n      socket.on(\n        \"playerLeft\",\n        ({ socketId, numberOfClients }) => {\n          console.log(`${socketId} left`, numberOfClients);\n          setRoomInfo({ ...roomInfo,numberOfClients });\n        }\n      );\n      return () => {\n        socket.off(\"moveMade\");\n        socket.off(\"playerJoined\");\n        socket.emit('leaveGame', { gameId, player:gameInfo.me.weapon });\n      };\n    }\n  }, []);\n  const fillCell = (index: number, shape: CellValue) => {\n    if (\n      currentPlayer !== gameInfo.me.weapon &&\n      (gameType === \"pvai\" || gameType === \"online\")\n    )\n      return;\n    let gameArray: CellValue[] = board.flat();\n    if (!gameArray[index]) {\n      gameArray[index] = shape;\n      let newBoard: CellValue[][] = to2DArray(gameArray, 3);\n      handleGameOver(newBoard);\n      setCurrentPlayer(currentPlayer === \"o\" ? \"x\" : \"o\");\n      setBoard([...newBoard]);\n      if (gameType === \"online\") makeMove(newBoard);\n    }\n  };\n  const GameBoxes = () => {\n    return (\n      <React.Fragment>\n        {boxes.map((box, index) => (\n          <div\n            key={index}\n            className={`${box} border-gray-400 flex items-center justify-center cursor-pointer`}\n            onClick={fillCell.bind(this, index, currentPlayer)}\n          >\n            {getShape[board.flat()[index]]}\n          </div>\n        ))}\n        {gameWinner && gameWinner.type !== \"TG\" && (\n          <GameOverBorder gameOverType={gameWinner.type} />\n        )}\n      </React.Fragment>\n    );\n  };\n  const gameRenderLogic: any = {\n    \"true-false\": <FindingMatch />,\n    \"false-false\": <GameBoxes />,\n    \"true-true\": <GameBoxes />,\n  };\n  return (\n    <React.Fragment>\n      <div className=\"flex flex-col items-center\">\n      {roomInfo.numberOfClients === roomInfo.totalPlayersCount && <Turn player={currentPlayer} gameInfo={gameInfo} />}\n      <div className=\"grid grid-cols-3 grid-rows-3 w-72 h-72  relative\">\n        {\n          gameRenderLogic[\n            `${gameType === \"online\"}-${\n              roomInfo.numberOfClients === roomInfo.totalPlayersCount\n            }`\n          ]\n        }\n      </div>\n      </div>\n    </React.Fragment>\n  );\n};\nexport default Game;\n","import { GameInfo, GameType } from \"contexts/GameContext\";\nimport { useEffect, useState } from \"react\";\nimport { CellValue, UniformResult } from \"utility/gameFunctions\";\n\ninterface GameOverScreenProps {\n  gameWinner: UniformResult<CellValue>;\n  gameInfo: GameInfo;\n  gameType: GameType;\n}\nconst GameOverScreen = ({ gameWinner,gameInfo,gameType }: GameOverScreenProps) => {\n  const [timer, setTimer] = useState(5);\n\n  useEffect(() => {\n    if (timer > 0) {\n      let timeinterval = setInterval(() => {\n        setTimer(timer - 1);\n        clearInterval(timeinterval);\n      }, 1000);\n    }\n  }, [timer]);\n  const gameOverMessage:any = {\n    'true-true-false': `${gameInfo[gameWinner.value].name} has won the match`,\n    'true-false-false': `${gameInfo[gameWinner.value].name} has won the match`,\n    'false-true-false': 'You won the match',\n    'false-false-false': 'You lost the match',\n    'false-false-true': 'TIE',\n    'true-false-true': 'TIE'\n  }\n  return (\n    <div className=\"flex justify-center flex-col items-center w-full h-full bg-gray-500/50 text-white text-2xl square\">\n      <p>{gameOverMessage[`${gameType==='pvp'}-${gameInfo.me.weapon===gameWinner.value}-${gameWinner.value==='t'}`]}</p>\n      <p> replaying game in {timer}</p>\n    </div>\n  );\n};\n\nexport default GameOverScreen;\n","import { AiPlayerValue } from \"contexts/GameContext\";\n\ntype Props = {\n  players: AiPlayerValue[];\n  setAiPlayer: (value:string) => void;\n  aiPlayer: string;\n};\nexport const AiPlayers = ({ players,aiPlayer,setAiPlayer }: Props) => {\n  return (\n    <select value={aiPlayer} onChange={(e)=>setAiPlayer(e.target.value)}>\n      {players.map((player: AiPlayerValue, index: number) => (\n        <option key={index} value={player.value}>\n          {player.name}\n        </option>\n      ))}\n    </select>\n  );\n};\nexport default AiPlayers;","import GameTurn from \"components/Game/GameTurn/GameTurn\";\nimport MainMenuButton from \"components/Buttons/MainMenuButton/MainMenuButton\";\nimport * as React from \"react\";\nimport Game from \"../Game\";\nimport { aiPlayers, useGame } from \"contexts/GameContext\";\nimport GameOverScreen from \"../GameOverScreen/GameOverScreen\";\nimport AiPlayers from \"components/AiPlayers/AiPlayers\";\n\ninterface AiModeSelection {\n  [key: string]: React.ReactElement;\n}\ninterface GameScreenProps {}\nconst GameScreen = ({}: GameScreenProps) => {\n  const {\n    gameWinner,\n    gameInfo,\n    currentPlayer,\n    gameType,\n    setAiPlayer,\n    aiPlayer,\n    resetScore,\n  } = useGame();\n  const aiSelection: AiModeSelection = {\n    pvai: (\n      <AiPlayers\n        players={Object.values(aiPlayers)}\n        aiPlayer={aiPlayer}\n        setAiPlayer={setAiPlayer}\n      />\n    ),\n  };\n  return (\n    <React.Fragment>\n      <div className=\"flex flex-col h-full justify-between\">\n        <div className=\"flex w-full justify-between\">\n          <MainMenuButton title=\"Main Menu\" link=\"/\" />\n          {aiSelection[gameType]}\n          <MainMenuButton\n            title=\"Reset Score\"\n            color=\"red\"\n            onClick={resetScore}\n          />\n        </div>\n        <div className=\"flex w-full justify-center\">\n          <Game />\n        </div>\n        <div className=\"flex w-full justify-around\">\n          <GameTurn\n            currentPlayer={currentPlayer}\n            playerName={gameInfo[\"o\"].name}\n            count={gameInfo[\"o\"].score}\n            weapon=\"o\"\n          />\n          <GameTurn\n            currentPlayer={currentPlayer}\n            playerName={gameInfo[\"t\"].name}\n            count={gameInfo[\"t\"].score}\n            weapon=\"t\"\n          />\n          <GameTurn\n            currentPlayer={currentPlayer}\n            playerName={gameInfo[\"x\"].name}\n            count={gameInfo[\"x\"].score}\n            weapon=\"x\"\n          />\n        </div>\n      </div>\n      <div className=\"mt-[-84%] flex w-full h-[101%]\">\n        {gameWinner && (\n          <GameOverScreen\n            gameType={gameType}\n            gameInfo={gameInfo}\n            gameWinner={gameWinner}\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\nexport default GameScreen;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\ninterface Props {\n  title?: string;\n  link?: string;\n  color?: string;\n  onClick?: () => void;\n}\nconst MainMenuButton = ({\n  title = \"Click Me\",\n  link = \"/\",\n  color = \"green\",\n  onClick,\n}: Props) => {\n  let colorMap = new Map<string, string>();\n  colorMap.set(\n    \"green\",\n    \"from-green-400 via-green-500 to-green-600 hover:from-green-500 hover:to-green-700\"\n  );\n  colorMap.set(\n    \"red\",\n    \"from-red-400 via-red-500 to-red-600 hover:from-red-500 hover:to-red-700\"\n  );\n  colorMap.set(\n    \"blue\",\n    \"from-blue-400 via-blue-500 to-blue-600 hover:from-blue-500 hover:to-blue-700\"\n  );\n  if (onClick)\n    return (\n      <div\n        onClick={onClick}\n        className={`text-center inline-block bg-gradient-to-r ${colorMap.get(\n          color\n        )} text-white font-semibold py-2 px-6 rounded-lg shadow-md  transition-all duration-300 cursor-pointer`}\n      >\n        {title}\n      </div>\n    );\n  return (\n    <React.Fragment>\n      <Link\n        to={link}\n        className={`text-center inline-block bg-gradient-to-r ${colorMap.get(\n          color\n        )} text-white font-semibold py-2 px-6 rounded-lg shadow-md  transition-all duration-300`}\n      >\n        {title}\n      </Link>\n    </React.Fragment>\n  );\n};\nexport default MainMenuButton;\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  ReactNode,\n  useEffect,\n} from \"react\";\nimport {\n  bestPlayerVsComputer,\n  CellValue,\n  easyPlayerVsComputer,\n  hardPlayerVsComputer,\n  isGameOver,\n  UniformResult,\n} from \"utility/gameFunctions\";\n\ninterface GameContextType {\n  gameType: GameType;\n  board: CellValue[][];\n  setBoard: (board: CellValue[][]) => void;\n  currentPlayer: CellValue;\n  setCurrentPlayer: (player: CellValue) => void;\n  gameWinner: UniformResult<CellValue> | false;\n  setGameWinner: (winner: UniformResult<CellValue> | false) => void;\n  gameInfo: GameInfo;\n  setGameInfo: (info: GameInfo) => void;\n  resetGame: () => void;\n  resetScore: () => void;\n  handleGameOver: (newBoard: CellValue[][]) => void;\n  setAiPlayer: (player: string) => void;\n  aiPlayer: string;\n  gameId?: string;\n}\ninterface Player {\n  name: string;\n  weapon: string;\n  score: number;\n}\nexport interface GameInfo {\n  [key: string]: Player;\n}\nconst defaultBoard: CellValue[][] = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\nconst defaultGameInfo: GameInfo = {\n  me: {\n    name: \"Player1\",\n    weapon: \"o\",\n    score: 0,\n  },\n  o: {\n    name: \"Player1\",\n    weapon: \"o\",\n    score: 0,\n  },\n  x: {\n    name: \"Player2\",\n    weapon: \"x\",\n    score: 0,\n  },\n  t: {\n    name: \"TIE\",\n    weapon: \"t\",\n    score: 0,\n  },\n};\nexport interface AiPlayerValue {\n  value: string;\n  name: string;\n  method: Function;\n}\nexport interface AiPlayer {\n  [key: string]: AiPlayerValue;\n}\nexport const aiPlayers: AiPlayer = {\n  e: {\n    value: \"e\",\n    name: \"Easy\",\n    method: easyPlayerVsComputer,\n  },\n  m: {\n    value: \"m\",\n    name: \"Medium\",\n    method: hardPlayerVsComputer,\n  },\n  h: {\n    value: \"h\",\n    name: \"Hard\",\n    method: bestPlayerVsComputer,\n  },\n};\nexport type GameType = \"pvp\" | \"pvai\" | \"online\";\nconst GameContext = createContext<GameContextType | undefined>(undefined);\ninterface GameProviderProps {\n  children: ReactNode;\n  gameType: GameType;\n  onlinePlayer?: CellValue;\n  gameId?:string;\n}\nexport const GameProvider = ({\n  children,\n  gameType,\n  onlinePlayer,\n  gameId\n}: GameProviderProps) => {\n  const [board, setBoard] = useState<CellValue[][]>(defaultBoard);\n  const [currentPlayer, setCurrentPlayer] = useState<CellValue>(\"o\");\n  const [gameInfo, setGameInfo] = useState<GameInfo>(defaultGameInfo);\n  const [gameWinner, setGameWinner] = useState<\n    UniformResult<CellValue> | false\n  >(false);\n  const [aiPlayer, setAiPlayer] = useState<string>(\"e\");\n  console.log(\"gameInfo\",gameInfo);\n  useEffect(() => {\n    handleGameOperations();\n  }, [board]);\n\n  const handleGameOperations = async () => {\n    if (gameType === \"pvai\") {\n      if (gameInfo[\"me\"].weapon !== currentPlayer && !gameWinner) {\n        let newBoard = await aiPlayers[aiPlayer].method(board, currentPlayer);\n        handleGameOver(newBoard);\n        setBoard([...newBoard]);\n        setCurrentPlayer(currentPlayer === \"o\" ? \"x\" : \"o\");\n      }\n    }\n    if (gameType === \"online\") {\n      gameInfo[\"me\"] = gameInfo[onlinePlayer || \"o\"];\n      setGameInfo({ ...gameInfo });\n    }\n  };\n\n  const handleGameOver = (newBoard: CellValue[][]) => {\n    const gameOverValue = isGameOver(newBoard);\n    setGameWinner(gameOverValue);\n    if (gameOverValue) {\n      gameInfo[gameOverValue.value].score += 1;\n      setGameInfo({ ...gameInfo });\n      let gameTimeout = setTimeout(() => {\n        resetGame();\n        clearTimeout(gameTimeout);\n      }, 5000);\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(defaultBoard);\n    setCurrentPlayer(gameInfo.me.weapon as CellValue);\n    setGameWinner(false);\n  };\n  const resetScore = () => {\n    setGameInfo(JSON.parse(JSON.stringify(defaultGameInfo)));\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        gameType,\n        gameId,\n        board,\n        setBoard,\n        currentPlayer,\n        setCurrentPlayer,\n        aiPlayer,\n        setAiPlayer,\n        gameWinner,\n        setGameWinner,\n        resetGame,\n        resetScore,\n        gameInfo,\n        setGameInfo,\n        handleGameOver,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = (): GameContextType => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error(\"useGame must be used within a GameProvider\");\n  }\n  return context;\n};\n","export const to2DArray = (arr: CellValue[], chunkSize: number): CellValue[][] =>\n  Array.from({ length: Math.ceil(arr.length / chunkSize) }, (_, i) =>\n    arr.slice(i * chunkSize, i * chunkSize + chunkSize)\n  );\nexport const isBoardEmpty = (\n  arr: (CellValue | string | null | undefined)[][]\n): boolean => {\n  return arr.every((row) =>\n    row.every((cell) => cell === \"\" || cell === null || cell === undefined)\n  );\n};\nexport const isGameOverCheck = (\n  gameArray: CellValue[]\n): UniformResult<CellValue> | false => {\n  const game2DArray: CellValue[][] = to2DArray(gameArray, 3);\n  return isGameOver(game2DArray);\n};\nexport const isGameOver = (\n  gameArray: CellValue[][]\n): UniformResult<CellValue> | false => {\n  let resultGameOver: UniformResult<CellValue>[] =\n    getUniformsWithValues(gameArray);\n  if (resultGameOver.length > 0) {\n    return resultGameOver[0];\n  }\n  return false;\n};\nexport type LineType =\n  | \"TG\"\n  | \"row1\"\n  | \"row2\"\n  | \"row3\"\n  | \"col1\"\n  | \"col2\"\n  | \"col3\"\n  | \"LD\"\n  | \"RD\";\nexport type CellValue = \"o\" | \"x\" | \"t\" | \"\";\nexport interface UniformResult<T> {\n  type: LineType; // \"row1\", \"col2\", \"LD\", \"RD\", etc.\n  value: T;\n}\nconst getUniformsWithValues = (\n  matrix: CellValue[][]\n): UniformResult<CellValue>[] => {\n  const result: UniformResult<CellValue>[] = [];\n\n  const size = matrix.length;\n\n  //  Check rows\n  matrix.forEach((row, i) => {\n    if (row.every((cell) => cell === row[0]) && row[0] !== \"\") {\n      result.push({\n        type: `row${i + 1}` as LineType,\n        value: row[0] as CellValue,\n      });\n    }\n  });\n\n  //  Check columns\n  for (let col = 0; col < size; col++) {\n    const first = matrix[0][col];\n    let isUniform = true;\n    for (let row = 1; row < size; row++) {\n      if (matrix[row][col] !== first) {\n        isUniform = false;\n        break;\n      }\n    }\n    if (isUniform && first !== \"\") {\n      result.push({\n        type: `col${col + 1}` as LineType,\n        value: first as CellValue,\n      });\n    }\n  }\n\n  //  Left Diagonal\n  const leftDiagonalValue = matrix[0][0];\n  if (\n    matrix.every((row, i) => row[i] === leftDiagonalValue) &&\n    leftDiagonalValue !== \"\"\n  ) {\n    result.push({\n      type: \"LD\",\n      value: leftDiagonalValue as CellValue,\n    });\n  }\n\n  //  Right Diagonal\n  const rightDiagonalValue = matrix[0][size - 1];\n  if (\n    matrix.every((row, i) => row[size - 1 - i] === rightDiagonalValue) &&\n    rightDiagonalValue !== \"\"\n  ) {\n    result.push({\n      type: \"RD\",\n      value: rightDiagonalValue as CellValue,\n    });\n  }\n\n  // tied\n  if (result.length < 1) {\n    const allNotEmpty = (array: CellValue[][]): boolean => {\n      return array.every((row) => row.every((cell) => cell.trim() !== \"\"));\n    };\n    if (allNotEmpty(matrix)) {\n      result.push({\n        type: \"TG\",\n        value: \"t\",\n      });\n    }\n  }\n\n  return result;\n};\n\nexport const easyPlayerVsComputer = async (\n  cellValues: CellValue[][],\n  valueToInsert: CellValue\n): Promise<CellValue[][]> => {\n  let emptyIndexes: number[] = [];\n  let flatCellValues = cellValues.flat();\n  flatCellValues.forEach((cell: CellValue, index: number) => {\n    if (cell === \"\") emptyIndexes.push(index);\n  });\n  const max = Math.max(...emptyIndexes);\n  const min = Math.min(...emptyIndexes);\n  let randomIndex = getRandomInRange(min, max);\n  while (!emptyIndexes.includes(randomIndex))\n    randomIndex = getRandomInRange(min, max);\n  flatCellValues[randomIndex] = valueToInsert;\n  await delay(1000);\n  return to2DArray(flatCellValues, 3);\n};\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nconst getRandomInRange = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\ntype Player = \"X\" | \"O\" | \"\";\ntype Board = CellValue[][];\n\nfunction cloneBoard(board: Board): Board {\n  return board.map((row) => [...row]);\n}\n\nfunction getOpponent(player: CellValue): CellValue {\n  return player === \"x\" ? \"o\" : \"x\";\n}\n\nfunction evaluate(board: Board, aiPlayer: CellValue): number {\n  const opponent = getOpponent(aiPlayer);\n\n  const lines: any[] = [\n    // Rows\n    ...board,\n    // Columns\n    [0, 1, 2].map((i) => [board[0][i], board[1][i], board[2][i]]),\n    // Diagonals\n    [board[0][0], board[1][1], board[2][2]],\n    [board[0][2], board[1][1], board[2][0]],\n  ];\n\n  for (const line of lines) {\n    if (line.every((cell: CellValue) => cell === aiPlayer)) return 10;\n    if (line.every((cell: CellValue) => cell === opponent)) return -10;\n  }\n\n  return 0; // No winner yet\n}\n\nfunction isMovesLeft(board: Board): boolean {\n  return board.some((row) => row.includes(\"\"));\n}\n\nfunction minimax(\n  board: Board,\n  depth: number,\n  isMax: boolean,\n  aiPlayer: CellValue\n): number {\n  const score = evaluate(board, aiPlayer);\n  if (score === 10 || score === -10) return score - depth;\n  if (!isMovesLeft(board)) return 0;\n\n  const opponent = getOpponent(aiPlayer);\n  let best = isMax ? -Infinity : Infinity;\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === \"\") {\n        board[i][j] = isMax ? aiPlayer : opponent;\n        const value = minimax(board, depth + 1, !isMax, aiPlayer);\n        board[i][j] = \"\";\n        best = isMax ? Math.max(best, value) : Math.min(best, value);\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const hardPlayerVsComputer = async (\n  board: Board,\n  aiPlayer: CellValue\n): Promise<Board> => {\n  let bestVal = -Infinity;\n  let bestMove: [number, number] = [-1, -1];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i][j] === \"\") {\n        board[i][j] = aiPlayer;\n        const moveVal = minimax(board, 0, false, aiPlayer);\n        board[i][j] = \"\";\n\n        if (moveVal > bestVal) {\n          bestVal = moveVal;\n          bestMove = [i, j];\n        }\n      }\n    }\n  }\n\n  const newBoard = cloneBoard(board);\n  const [x, y] = bestMove;\n  if (x !== -1 && y !== -1) {\n    newBoard[x][y] = aiPlayer;\n  }\n  await delay(1000);\n  return newBoard;\n};\n\ninterface Move {\n  row: number;\n  col: number;\n}\n\nconst _minimax = () => {\n  let player: CellValue = \"x\";\n  let opponent: CellValue = \"o\";\n\n  const isMovesLeft = (board: Board): boolean => {\n    for (let i = 0; i < 3; i++)\n      for (let j = 0; j < 3; j++) if (board[i][j] === \"\") return true;\n    return false;\n  };\n\n  const evaluate = (b: Board): number => {\n    // Check rows\n    for (let row = 0; row < 3; row++) {\n      if (b[row][0] === b[row][1] && b[row][1] === b[row][2]) {\n        if (b[row][0] === player) return +10;\n        else if (b[row][0] === opponent) return -10;\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < 3; col++) {\n      if (b[0][col] === b[1][col] && b[1][col] === b[2][col]) {\n        if (b[0][col] === player) return +10;\n        else if (b[0][col] === opponent) return -10;\n      }\n    }\n\n    // Check diagonals\n    if (b[0][0] === b[1][1] && b[1][1] === b[2][2]) {\n      if (b[0][0] === player) return +10;\n      else if (b[0][0] === opponent) return -10;\n    }\n\n    if (b[0][2] === b[1][1] && b[1][1] === b[2][0]) {\n      if (b[0][2] === player) return +10;\n      else if (b[0][2] === opponent) return -10;\n    }\n\n    return 0;\n  };\n\n  const minimax = (board: Board, depth: number, isMax: boolean): number => {\n    const score = evaluate(board);\n\n    if (score === 10 || score === -10) return score;\n\n    if (!isMovesLeft(board)) return 0;\n\n    if (isMax) {\n      let best = -Infinity;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = player;\n            best = Math.max(best, minimax(board, depth + 1, false));\n            board[i][j] = \"\";\n          }\n        }\n      }\n\n      return best;\n    } else {\n      let best = Infinity;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = opponent;\n            best = Math.min(best, minimax(board, depth + 1, true));\n            board[i][j] = \"\";\n          }\n        }\n      }\n\n      return best;\n    }\n  };\n\n  const findBestMove = (board: Board): Move => {\n    let bestVal = -Infinity;\n    let bestMove: Move = { row: -1, col: -1 };\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === \"\") {\n          board[i][j] = player;\n          const moveVal = minimax(board, 0, false);\n          board[i][j] = \"\";\n\n          if (moveVal > bestVal) {\n            bestVal = moveVal;\n            bestMove = { row: i, col: j };\n          }\n        }\n      }\n    }\n\n    return bestMove;\n  };\n\n  return {\n    findBestMove,\n    setPlayer(p: CellValue) {\n      player = p;\n      opponent = p === \"x\" ? \"o\" : \"x\";\n    },\n  };\n};\n\nexport const bestPlayerVsComputer = async (\n  board: Board,\n  player: CellValue\n): Promise<Board> => {\n  const minimaxAI = _minimax();\n  minimaxAI.setPlayer(player); // Let AI play as \"o\"\n  const bestMove = minimaxAI.findBestMove(board);\n\n  console.log(\"Best move for AI:\", bestMove);\n  board[bestMove.row][bestMove.col] = player;\n  await delay(1000);\n  return board;\n};\n","import GameScreen from 'components/Game/GameScreen/GameScreen';\nimport { GameProvider } from 'contexts/GameContext';\nimport React,{useEffect} from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { CellValue } from 'utility/gameFunctions';\nimport { socket } from 'utility/socket';\n\ninterface Props{\n}\nconst Multiplayer = ({}: Props) => {\n    const {gameId} = useParams();\n    const [params] = useSearchParams();\n    const player: CellValue = params.get('player') as CellValue;\n\n    useEffect(()=>{\n        socket.emit('joinGame', { gameId: gameId, player: player });\n    },[gameId]);\n    return ( \n        <React.Fragment>\n            <GameProvider gameType='online' gameId={gameId} onlinePlayer={player}>\n                <GameScreen />\n            </GameProvider>\n        </React.Fragment>\n    );\n}\nexport default Multiplayer;","// sockets/socket.ts\nimport { io } from 'socket.io-client';\n\nexport const socket = io(process.env.REACT_APP_BACKEND_URL, {\n  transports: ['websocket'],\n});\n"],"names":["playerColor","o","x","_ref","count","playerName","weapon","currentPlayer","gameInfo","gameType","useGame","bottomBorderCondition","true","false","currentPlayerName","_jsx","children","weaponLogic","_jsxs","className","React","gameOverType","TG","LD","RD","row1","row2","row3","col1","col2","col3","player","me","FindingMatch","MainMenuButton","title","color","onClick","async","window","location","href","length","url","substring","navigator","clipboard","writeText","console","log","err","error","boxes","defaultRoom","totalPlayersCount","numberOfClients","gameId","board","setBoard","setCurrentPlayer","gameWinner","handleGameOver","resetGame","resetScore","roomInfo","setRoomInfo","useState","getShape","CircleShape","CrossShape","useEffect","socket","on","_ref2","newBoard","_ref3","_ref4","socketId","off","emit","fillCell","index","shape","gameArray","flat","to2DArray","makeMove","GameBoxes","map","box","bind","type","GameOverBorder","gameRenderLogic","Turn","timer","setTimer","timeinterval","setInterval","clearInterval","gameOverMessage","value","name","players","aiPlayer","setAiPlayer","onChange","e","target","aiSelection","pvai","AiPlayers","Object","values","aiPlayers","link","Game","GameTurn","score","GameOverScreen","colorMap","Map","set","get","Link","to","defaultBoard","defaultGameInfo","t","method","easyPlayerVsComputer","m","hardPlayerVsComputer","h","bestPlayerVsComputer","GameContext","createContext","undefined","GameProvider","onlinePlayer","setGameInfo","setGameWinner","handleGameOperations","gameOverValue","isGameOver","gameTimeout","setTimeout","clearTimeout","Provider","JSON","parse","stringify","context","useContext","Error","arr","chunkSize","Array","from","Math","ceil","_","i","slice","resultGameOver","getUniformsWithValues","matrix","result","size","forEach","row","every","cell","push","col","first","isUniform","leftDiagonalValue","rightDiagonalValue","array","trim","allNotEmpty","cellValues","valueToInsert","emptyIndexes","flatCellValues","max","min","randomIndex","getRandomInRange","includes","delay","ms","Promise","resolve","floor","random","getOpponent","minimax","depth","isMax","opponent","lines","line","evaluate","some","isMovesLeft","best","Infinity","j","bestVal","bestMove","moveVal","cloneBoard","y","_minimax","b","findBestMove","setPlayer","p","minimaxAI","useParams","params","useSearchParams","GameScreen","io","process","transports"],"sourceRoot":""}